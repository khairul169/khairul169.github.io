{"version":3,"sources":["assets/graphic-design.png","assets/music.png","public/APIService.js","screens/Home.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","API_URL","get","url","a","axios","post","body","JSON","stringify","headers","postMultipart","data","formData","FormData","Object","keys","forEach","key","value","append","Header","className","href","DropZone","onDrop","children","useDropzone","getRootProps","getInputProps","Home","useState","audioFile","setAudioFile","imageFile","setImageFile","imageUrl","setImageUrl","isLoading","setLoading","progress","setProgress","convertResult","setConvertResult","toggleModal","onProcess","mp3","image","APIService","taskId","socket","io","on","emit","args","percentage","Math","round","filename","res","name","console","log","Modal","isOpen","toggle","centered","ModalHeader","ModalBody","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","width","height","files","length","file","type","reader","FileReader","onload","e","result","target","readAsDataURL","src","require","alt","ModalFooter","Button","color","disabled","onClick","Spinner","window","location","border","borderRadius","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94949277.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/graphic-design.658e8506.png\";","module.exports = __webpack_public_path__ + \"static/media/music.e4329ecd.png\";","import axios from 'axios';\n\n// const API_URL = 'http://localhost:8000';\nconst API_URL = 'https://music-mp4.herokuapp.com';\n\nconst get = async (url) => axios.get(API_URL + url);\n\nconst post = async (url, body) => axios.post(API_URL + url, JSON.stringify(body), {\n  headers: { 'Content-Type': 'application/json' },\n});\n\nconst postMultipart = async (url, data) => {\n  const formData = new FormData();\n\n  // Add data object to formData\n  Object.keys(data).forEach((key) => {\n    const value = data[key];\n    formData.append(key, value);\n  });\n\n  return axios.post(API_URL + url, formData, {\n    headers: { 'Content-Type': 'multipart/form-data' },\n  });\n};\n\nexport default {\n  API_URL, get, post, postMultipart,\n};\n","import React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport {\n  Modal, ModalHeader, ModalBody, ModalFooter, Button, Spinner,\n} from 'reactstrap';\nimport io from 'socket.io-client';\nimport APIService from '../public/APIService';\n\nconst Header = () => (\n  <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom box-shadow\">\n    <h5 className=\"my-0 mr-md-auto font-weight-normal\">Music MP3</h5>\n    <nav className=\"my-2 my-md-0 mr-md-3\">\n      <a className=\"p-2 text-dark\" href=\"/\">Home</a>\n      <a className=\"p-2 text-dark\" href=\"/\">About</a>\n    </nav>\n    <a className=\"btn btn-outline-primary\" href=\"/\">Sign up</a>\n  </div>\n);\n\nconst DropZone = ({ onDrop, children }) => {\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      {children}\n    </div>\n  );\n};\n\nconst Home = () => {\n  const [audioFile, setAudioFile] = useState();\n  const [imageFile, setImageFile] = useState();\n  const [imageUrl, setImageUrl] = useState();\n  const [isLoading, setLoading] = useState(false);\n  const [progress, setProgress] = useState();\n  const [convertResult, setConvertResult] = useState();\n\n  const toggleModal = () => setAudioFile(null);\n\n  const onAudioDrop = (files) => {\n    if (!files.length) {\n      return;\n    }\n    const file = files[0];\n    if (file.type !== 'audio/mpeg') {\n      return;\n    }\n    setAudioFile(file);\n  };\n\n  const onImageDrop = (files) => {\n    if (!files.length) {\n      return;\n    }\n    const file = files[0];\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const { result } = e.target;\n      setImageUrl(result);\n    };\n    reader.readAsDataURL(file);\n    setImageFile(file);\n  };\n\n  const onProcess = async () => {\n    setLoading(true);\n\n    try {\n      const body = { mp3: audioFile, image: imageFile };\n      toggleModal();\n\n      const { data } = await APIService.postMultipart('/upload', body);\n      if (!data || !data.taskId) {\n        return;\n      }\n\n      const { taskId } = data;\n\n      const socket = io(APIService.API_URL);\n\n      socket.on('connect', () => {\n        socket.emit('task_progress', taskId);\n      });\n\n      socket.on('queue_progress', (args) => {\n        const percentage = args.progress;\n        if (percentage) {\n          setProgress(Math.round(percentage));\n        }\n      });\n\n      socket.on('queue_end', (args) => {\n        const { filename } = args;\n        const res = {\n          name: filename,\n          url: `${APIService.API_URL}/download/${filename}`,\n        };\n\n        setConvertResult(res);\n        setLoading(false);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"full-height d-flex flex-column\">\n      <Header />\n      <Modal isOpen={(audioFile != null)} toggle={toggleModal} centered>\n        <ModalHeader toggle={toggleModal}>\n          Convert to MP4\n        </ModalHeader>\n        <ModalBody>\n          { !imageFile || !imageUrl ? (\n            <DropZone onDrop={onImageDrop}>\n              <div className=\"d-flex flex-column align-items-center p-3\">\n                <img src={require('../assets/graphic-design.png')} width={96} alt=\"pict\" />\n                <p className=\"mt-3\">Drag n drop image file here, or click to select file</p>\n              </div>\n            </DropZone>\n          ) : (\n            <div className=\"text-center\">\n              <div style={{\n                backgroundImage: `url('${imageUrl}')`,\n                backgroundPosition: 'center',\n                backgroundSize: 'contain',\n                backgroundRepeat: 'no-repeat',\n                width: '100%',\n                height: '200px',\n              }}\n              />\n              <p className=\"mt-2\">{audioFile ? audioFile.name : ''}</p>\n            </div>\n          )}\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" disabled={!imageFile} onClick={onProcess}>\n            Process\n          </Button>\n          <Button onClick={toggleModal}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n      <div className=\"flex-grow-1 d-flex flex-column align-items-center justify-content-center pb-3\">\n        { isLoading ? (\n          <div className=\"d-flex flex-column align-items-center\">\n            <Spinner color=\"primary\" style={{ width: 64, height: 64 }} />\n            <h6 className=\"mt-3\">{progress ? `Processing.. (${progress}%)` : 'Uploading...'}</h6>\n          </div>\n        ) : (\n          <div>\n            { !convertResult ? (\n              <DropZone onDrop={onAudioDrop}>\n                <div\n                  className=\"d-flex flex-column align-items-center p-5\"\n                  style={{ border: '2px dashed #ddd', borderRadius: 10 }}\n                >\n                  <img src={require('../assets/music.png')} width={96} alt=\"music\" />\n                  <p className=\"mt-3\">Drag n drop music file here, or click to select file</p>\n                </div>\n              </DropZone>\n            ) : (\n              <div className=\"d-flex flex-column align-items-center p-5\">\n                <h5>{convertResult.name}</h5>\n                <Button\n                  className=\"mt-3\"\n                  color=\"primary\"\n                  onClick={() => {\n                    window.location.href = convertResult.url;\n                  }}\n                >\n                  Download\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Home from './screens/Home';\n\nconst App = () => Home();\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}